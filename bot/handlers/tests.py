from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
import html  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π ---
from bot.services.answer_db import (
    save_test_answer,
    save_test_progress,
    load_test_progress,
    clear_test_progress,
    get_mistake_questions,
    set_answer_correct,
    log_question_started,
    log_question_answered
)
from bot.services.test_sql import get_all_tests_types, get_questions_by_type, get_question_by_id

from bot.handlers.menu import main_kb  # –ò–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

router = Router()
user_test_state = {}

# =========================
# 1. –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
# =========================
def get_tests_types_kb(with_menu=False):
    types = get_all_tests_types()
    keyboard = [
        [InlineKeyboardButton(text=f"–¢–µ—Å—Ç {t}", callback_data=f"choose_test_{t}")]
        for t in types if t not in (None, '')
    ]
    # --- –ö–Ω–æ–ø–∫–∞ "–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏"
    keyboard.append([InlineKeyboardButton(text="üí° –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏", callback_data="work_on_mistakes")])
    if with_menu:
        keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# =========================
# 2. –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞: –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∏ –°—Ç–æ–ø —Ç–µ—Å—Ç
# =========================
def get_stop_test_kb(q_id):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data=f"hint_{q_id}")],
            [InlineKeyboardButton(text="‚èπÔ∏è –°—Ç–æ–ø —Ç–µ—Å—Ç", callback_data="stop_test")]
        ]
    )

# =========================
# 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤
# =========================
@router.message(lambda m: m.text == "üìù –¢–µ—Å—Ç—ã")
async def show_tests_types_menu(m: types.Message):
    await m.answer("–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–∞:", reply_markup=get_tests_types_kb())

@router.message(Command("tests"))
async def show_tests_menu_cmd(m: types.Message):
    await show_tests_types_menu(m)

# =========================
# 4. –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç (–ø–æ callback-–∫–Ω–æ–ø–∫–µ) —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
# =========================
@router.callback_query(lambda c: c.data.startswith("choose_test_"))
async def start_test(cb: CallbackQuery):
    try:
        test_type = int(cb.data.split("_")[-1])
    except ValueError:
        await cb.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–∞.")
        return

    idx, q_ids = load_test_progress(cb.from_user.id, test_type)
    if idx is not None and q_ids:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"continue_test_{test_type}")],
                [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"restart_test_{test_type}")]
            ]
        )
        await cb.message.answer(
            f"–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –≤–æ–ø—Ä–æ—Å–∞ {idx+1} –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",
            reply_markup=kb
        )
        await cb.answer()
        return

    # --- –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ—Ç ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ ---
    questions = get_questions_by_type(test_type)
    if not questions:
        await cb.message.answer("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞.")
        await cb.answer()
        return
    user_test_state[cb.from_user.id] = {
        "type": test_type,
        "idx": 0,
        "q_ids": [q["id"] for q in questions]
    }
    clear_test_progress(cb.from_user.id, test_type)
    await send_next_test_question(cb.from_user.id, cb.message, is_callback=True)
    await cb.answer()

# --- –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç ---
@router.callback_query(lambda c: c.data.startswith("continue_test_"))
async def continue_test(cb: CallbackQuery):
    test_type = int(cb.data.split("_")[-1])
    idx, q_ids = load_test_progress(cb.from_user.id, test_type)
    if idx is not None and q_ids:
        user_test_state[cb.from_user.id] = {
            "type": test_type,
            "idx": idx,
            "q_ids": q_ids
        }
        await send_next_test_question(cb.from_user.id, cb.message, is_callback=True)
    else:
        await cb.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    await cb.answer()

# --- –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ ---
@router.callback_query(lambda c: c.data.startswith("restart_test_"))
async def restart_test(cb: CallbackQuery):
    test_type = int(cb.data.split("_")[-1])
    questions = get_questions_by_type(test_type)
    if not questions:
        await cb.message.answer("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞.")
        await cb.answer()
        return
    user_test_state[cb.from_user.id] = {
        "type": test_type,
        "idx": 0,
        "q_ids": [q["id"] for q in questions]
    }
    clear_test_progress(cb.from_user.id, test_type)
    await send_next_test_question(cb.from_user.id, cb.message, is_callback=True)
    await cb.answer()

# =========================
# 5. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞
# =========================
async def send_next_test_question(user_id, message_obj, is_callback=False):
    state = user_test_state.get(user_id)
    if not state:
        return
    idx = state["idx"]
    q_ids = state["q_ids"]
    if idx >= len(q_ids):
        user_test_state.pop(user_id, None)
        await message_obj.answer("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é.")
        return
    q = get_question_by_id(q_ids[idx])
    log_question_started(user_id, state["type"], q["id"])  # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–¢–ê–†–¢–ê ---
    options = q['options'].split('\n')
    msg = (
        f"–í–æ–ø—Ä–æ—Å {idx+1} –∏–∑ {len(q_ids)} (–¢–µ—Å—Ç {state['type']})\n\n"
        f"{q['question']}\n\n" +
        "\n".join([f"{i+1}. {opt}" for i, opt in enumerate(options)]) +
        "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä(–∞) –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2 –∏–ª–∏ 13):"
    )
    kb = get_stop_test_kb(q['id'])
    await message_obj.answer(msg, reply_markup=kb)

# =========================
# 6. –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –°—Ç–æ–ø —Ç–µ—Å—Ç (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤)
# =========================
@router.callback_query(lambda c: c.data == "stop_test")
async def stop_test(cb: CallbackQuery):
    state = user_test_state.pop(cb.from_user.id, None)
    # --- –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ ---
    if state and "mistake_q_ids" in state:
        await cb.message.answer(
            "–†–∞–∑–±–æ—Ä –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω! –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ —Ä–∞–∑–¥–µ–ª —Ç–µ—Å—Ç–æ–≤.",
            reply_markup=get_tests_types_kb(with_menu=True)
        )
    elif state:
        save_test_progress(cb.from_user.id, state["type"], state["idx"], state["q_ids"])
        await cb.message.answer(
            "–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω! –í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:",
            reply_markup=get_tests_types_kb(with_menu=True)
        )
    else:
        await cb.message.answer(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç:",
            reply_markup=get_tests_types_kb(with_menu=True)
        )
    await cb.answer()

# =========================
# 7. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# =========================
@router.callback_query(lambda c: c.data == "to_main_menu")
async def to_main_menu(cb: CallbackQuery):
    await cb.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)
    await cb.answer()

# =========================
# 8. –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∫ –≤–æ–ø—Ä–æ—Å—É
# =========================
@router.callback_query(lambda c: c.data.startswith("hint_"))
async def show_hint(cb: CallbackQuery):
    q_id = int(cb.data.split("_")[-1])
    q = get_question_by_id(q_id)
    hint = q.get('hint', '')
    if hint and hint.strip():
        await cb.message.answer(html.escape(f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:\n{hint}"), parse_mode="HTML")
    else:
        await cb.message.answer("–î–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏.")
    await cb.answer()

# =========================
# 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å (–æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º)
# =========================
@router.message(lambda m: m.from_user.id in user_test_state and "q_ids" in user_test_state[m.from_user.id])
async def check_test_answer(m: types.Message):
    state = user_test_state.get(m.from_user.id)
    idx = state["idx"]
    q_ids = state["q_ids"]
    q = get_question_by_id(q_ids[idx])
    user_answer = ''.join(filter(str.isdigit, m.text))
    correct = ''.join(filter(str.isdigit, str(q.get("correct_answer", ""))))
    is_correct = user_answer == correct
    log_question_answered(m.from_user.id, q["id"], m.text, is_correct)  # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–¢–í–ï–¢–ê ---

    save_test_answer(
        m.from_user.id,
        getattr(m.from_user, "username", None) or m.from_user.full_name,
        state["type"],
        q["id"],
        q["question"],
        m.text,
        q.get("correct_answer", ""),
        is_correct
    )

    if is_correct:
        resp = "‚úÖ –í–µ—Ä–Ω–æ!"
    else:
        resp = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}"
    explanation = q.get("explanation", "") or q.get("detailed_explanation", "")
    if explanation and explanation.strip():
        resp += f"\n\n{explanation}"
    await m.answer(html.escape(resp), parse_mode="HTML")
    user_test_state[m.from_user.id]["idx"] += 1
    await send_next_test_question(m.from_user.id, m)

# ======================================================================
#       –ù–û–í–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ: –†–ê–ë–û–¢–ê –ù–ê–î –û–®–ò–ë–ö–ê–ú–ò (—Å –∫–Ω–æ–ø–∫–∞–º–∏)
# ======================================================================

# --- –ö–Ω–æ–ø–∫–∞ "–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏" ---
@router.callback_query(lambda c: c.data == "work_on_mistakes")
async def work_on_mistakes_menu(cb: CallbackQuery):
    user_id = cb.from_user.id
    mistakes = get_mistake_questions(user_id)
    if not mistakes:
        await cb.message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è! –ú–æ–ª–æ–¥–µ—Ü!")
        await cb.answer()
        return
    mistake_tests = sorted(set(row[0] for row in mistakes))
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"–¢–µ—Å—Ç {t}", callback_data=f"mistake_test_{t}")]
            for t in mistake_tests
        ] + [
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main_menu")]
        ]
    )
    await cb.message.answer("–í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç, –≥–¥–µ –±—ã–ª–∏ –æ—à–∏–±–∫–∏:", reply_markup=kb)
    await cb.answer()

# --- –°—Ç–∞—Ä—Ç —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–µ—Å—Ç—É ---
@router.callback_query(lambda c: c.data.startswith("mistake_test_"))
async def start_mistake_test(cb: CallbackQuery):
    test_type = int(cb.data.split("_")[-1])
    user_id = cb.from_user.id
    mistakes = [row for row in get_mistake_questions(user_id) if row[0] == test_type]
    if not mistakes:
        await cb.message.answer("–ù–µ—Ç –æ—à–∏–±–æ–∫ –≤ —ç—Ç–æ–º —Ç–µ—Å—Ç–µ.")
        await cb.answer()
        return
    user_test_state[user_id] = {
        "type": test_type,
        "idx": 0,
        "mistake_q_ids": [row[1] for row in mistakes]
    }
    await send_next_mistake_question(user_id, cb.message)
    await cb.answer()

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—à–∏–±–æ—á–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ---
async def send_next_mistake_question(user_id, message_obj):
    state = user_test_state.get(user_id)
    idx = state["idx"]
    q_ids = state["mistake_q_ids"]
    if idx >= len(q_ids):
        user_test_state.pop(user_id, None)
        await message_obj.answer("–í—Å–µ –æ—à–∏–±–∫–∏ –≤ —ç—Ç–æ–º —Ç–µ—Å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã! üëç")
        return
    q_id = q_ids[idx]
    q = get_question_by_id(q_id)
    log_question_started(user_id, state["type"], q_id)  # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –°–¢–ê–†–¢–ê ---
    options = q['options'].split('\n')
    msg = (
        f"–û—à–∏–±–∫–∞ {idx+1} –∏–∑ {len(q_ids)} (–¢–µ—Å—Ç {state['type']})\n\n"
        f"{q['question']}\n\n" +
        "\n".join([f"{i+1}. {opt}" for i, opt in enumerate(options)]) +
        "\n\n–ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É: –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä(–∞) –æ—Ç–≤–µ—Ç–∞:"
    )
    kb = get_stop_test_kb(q_id)
    await message_obj.answer(msg, reply_markup=kb)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—à–∏–±–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å ---
@router.message(lambda m: m.from_user.id in user_test_state and "mistake_q_ids" in user_test_state[m.from_user.id])
async def check_mistake_answer(m: types.Message):
    state = user_test_state.get(m.from_user.id)
    idx = state["idx"]
    q_ids = state["mistake_q_ids"]
    q_id = q_ids[idx]
    q = get_question_by_id(q_id)
    user_answer = ''.join(filter(str.isdigit, m.text))
    correct = ''.join(filter(str.isdigit, str(q.get("correct_answer", ""))))
    if user_answer == correct:
        resp = "‚úÖ –¢–µ–ø–µ—Ä—å –≤–µ—Ä–Ω–æ! –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞."
        set_answer_correct(m.from_user.id, q_id)
        log_question_answered(m.from_user.id, q_id, m.text, True)  # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–¢–í–ï–¢–ê ---
        user_test_state[m.from_user.id]["idx"] += 1
    else:
        resp = f"‚ùå –ü–æ–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"
        log_question_answered(m.from_user.id, q_id, m.text, False)  # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–¢–í–ï–¢–ê ---
    await m.answer(resp)
    await send_next_mistake_question(m.from_user.id, m)

# --- –ö–û–ù–ï–¶ –§–ê–ô–õ–ê ---
