import os
from bot.handlers.menu import main_kb
from aiogram import Router, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from bot.utils import (
    ALL_TOPICS, clean_html, user_topics, LEARNING_TOPICS,
    user_learning_state, TEXTBOOK_CONTENT, latex_to_codeblock
)
from bot.services.gpt_service import (
    classify_topic, analyze_answer, transcribe_audio,
    teach_material, answer_student_question
)
from bot.services.spreadsheet import save_answer

router = Router()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–º ---
topics_kb = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text=ALL_TOPICS[i]),
            KeyboardButton(text=ALL_TOPICS[i+1] if i+1 < len(ALL_TOPICS) else "")
        ]
        for i in range(0, len(ALL_TOPICS), 2)
    ] + [[KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

after_topic_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚¨ÖÔ∏è –ö —Ç–µ–º–∞–º"), KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

choose_chapter_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")]],
    resize_keyboard=True
)

# === 1. –û–±—ã—á–Ω—ã–µ —Ç–µ–º—ã ===
@router.message(lambda m: m.text == "üß™ –£—Å—Ç–Ω—ã–π –∑–∞—á–µ—Ç")
async def show_topics(m: types.Message):
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø–æ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Ö–∏–º–∏–∏:", reply_markup=topics_kb)

@router.message(lambda m: m.text in ALL_TOPICS)
async def ask_questions(m: types.Message):
    user_topics[m.from_user.id] = m.text
    questions = (
        f"1. –û–±—â–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Å–∞ {m.text}\n"
        f"2. –°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è {m.text}\n"
        f"3. –•–∏–º–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ {m.text}"
    )
    await m.answer(questions, reply_markup=after_topic_kb)
    await m.answer("–ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã:")

@router.message(lambda m: m.text == "‚¨ÖÔ∏è –ö —Ç–µ–º–∞–º")
async def back_to_topics(m: types.Message):
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø–æ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Ö–∏–º–∏–∏:", reply_markup=topics_kb)

@router.message(lambda m: m.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é")
async def back_to_menu(m: types.Message):
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)

# === 2. –ö—É—Ä—Å –ø–æ –æ—Ä–≥–∞–Ω–∏–∫–µ ===
# --- –í–∞—Ä–∏–∞–Ω—Ç 1: —Å–ø–∏—Å–æ–∫ —Ç–µ–º –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Ç–∞–∫–æ–π UX) ---
#@router.message(lambda m: m.text == "üå± –ö—É—Ä—Å –ø–æ –æ—Ä–≥–∞–Ω–∏–∫–µ")
#async def show_learning_topics(m: types.Message):
#    kb = ReplyKeyboardMarkup(
#        keyboard=[
#            [KeyboardButton(text=f"{i + 1}. {t}")] for i, t in enumerate(LEARNING_TOPICS)
#        ] + [[KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")]],
#        resize_keyboard=True
#    )
#    await m.answer("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=kb)

# --- –í–∞—Ä–∏–∞–Ω—Ç 2: –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å —Å chunk'–∞–º–∏ –∏ inline-–∫–Ω–æ–ø–∫–∞–º–∏ (–æ—Å—Ç–∞–≤—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±—É—á–µ–Ω–∏–µ) ---
@router.message(lambda m: m.text == "üå± –ö—É—Ä—Å –ø–æ –æ—Ä–≥–∞–Ω–∏–∫–µ")
async def on_learning_start(m: types.Message):
    buttons = [
        [InlineKeyboardButton(text=topic, callback_data=f"learn_topic_{i}")]
        for i, topic in enumerate(LEARNING_TOPICS)
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await m.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É –¥–ª—è –∫—É—Ä—Å–∞ –ø–æ –æ—Ä–≥–∞–Ω–∏–∫–µ:",
        reply_markup=kb
    )
    await m.answer(
        "–ú–æ–∂–µ—à—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:",
        reply_markup=choose_chapter_kb
    )

@router.callback_query(lambda c: c.data.startswith("learn_topic_"))
async def on_topic_chosen(cb: types.CallbackQuery, bot):
    idx = int(cb.data.split("learn_topic_")[-1])
    topic = LEARNING_TOPICS[idx]
    user_learning_state[cb.from_user.id] = {"topic": topic, "index": 0, "awaiting_question": False}
    await send_next_chunk(cb.from_user.id, bot)

async def send_next_chunk(user_id: int, bot):
    from aiogram.enums import ParseMode
    from bot.handlers.menu import main_kb
    st = user_learning_state.get(user_id)
    if not st:
        return
    topic = st["topic"]
    idx = st["index"]
    chunks = TEXTBOOK_CONTENT.get(topic, [])
    total = len(chunks)
    chap_num = LEARNING_TOPICS.index(topic) + 1
    chap_total = len(LEARNING_TOPICS)
    if idx >= total:
        await bot.send_message(
            user_id,
            f"–ì–ª–∞–≤–∞ {topic} –ø—Ä–æ–π–¥–µ–Ω–∞! üéâ\n–í–æ–∑–≤—Ä–∞—â–∞—é –º–µ–Ω—é.",
            reply_markup=main_kb
        )
        user_learning_state.pop(user_id, None)
        return
    header = f"–ì–ª–∞–≤–∞ {chap_num}/{chap_total}, –ø–æ—Ä—Ü–∏—è {idx+1}/{total}\n\n"
    raw = await teach_material(chunks[idx])
    formatted = latex_to_codeblock(raw)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="learn_back"),
            InlineKeyboardButton(text="üëç –ü–æ–Ω—è—Ç–Ω–æ", callback_data="learn_ok")
        ],
        [
            InlineKeyboardButton(text="‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="learn_ask"),
            InlineKeyboardButton(text="‚ñ† –°—Ç–æ–ø", callback_data="learn_stop"),
            InlineKeyboardButton(text="üè† –ö –≥–ª–∞–≤–∞–º", callback_data="learn_to_chapters")
        ]
    ])
    await bot.send_message(
        user_id,
        header + formatted,
        reply_markup=kb,
        parse_mode=ParseMode.MARKDOWN
    )

@router.callback_query(lambda c: c.data == "learn_ok")
async def on_learning_ok(cb: types.CallbackQuery, bot):
    st = user_learning_state.get(cb.from_user.id)
    if not st:
        return
    st["index"] += 1
    await send_next_chunk(cb.from_user.id, bot)

@router.callback_query(lambda c: c.data == "learn_back")
async def on_learning_back(cb: types.CallbackQuery, bot):
    st = user_learning_state.get(cb.from_user.id)
    if not st:
        return
    if st["index"] == 0:
        await cb.answer("–í—ã –Ω–∞ –ø–µ—Ä–≤–æ–π –ø–æ—Ä—Ü–∏–∏.", show_alert=True)
    else:
        st["index"] -= 1
        await send_next_chunk(cb.from_user.id, bot)

@router.callback_query(lambda c: c.data == "learn_ask")
async def on_learning_ask(cb: types.CallbackQuery, bot):
    st = user_learning_state.get(cb.from_user.id)
    if not st:
        return
    st["awaiting_question"] = True
    await bot.send_message(cb.from_user.id, "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É:", reply_markup=ReplyKeyboardRemove())

@router.callback_query(lambda c: c.data == "learn_stop")
async def on_learning_stop(cb: types.CallbackQuery, bot):
    from bot.handlers.menu import main_kb
    user_learning_state.pop(cb.from_user.id, None)
    await bot.send_message(
        cb.from_user.id,
        "–ö—É—Ä—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å, –Ω–∞–∂–º–∏ ‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ üå± –ö—É—Ä—Å –ø–æ –æ—Ä–≥–∞–Ω–∏–∫–µ.",
        reply_markup=main_kb
    )

@router.callback_query(lambda c: c.data == "learn_to_chapters")
async def to_chapters(cb: types.CallbackQuery, bot):
    buttons = [
        [InlineKeyboardButton(text=topic, callback_data=f"learn_topic_{i}")]
        for i, topic in enumerate(LEARNING_TOPICS)
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    user_learning_state.pop(cb.from_user.id, None)
    await bot.send_message(cb.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É –¥–ª—è –∫—É—Ä—Å–∞ –ø–æ –æ—Ä–≥–∞–Ω–∏–∫–µ:", reply_markup=kb)
    await bot.send_message(cb.from_user.id, "–ú–æ–∂–µ—à—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:", reply_markup=choose_chapter_kb)

# === –†–∞–±–æ—Ç–∞ —Å –≥–æ–ª–æ—Å–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ª—é–±–æ–≥–æ —Ä–µ–∂–∏–º–∞ ===
@router.message(lambda m: m.voice is not None)
async def on_voice(m: types.Message, bot):
    file = await bot.get_file(m.voice.file_id)
    path = f"audio_{m.from_user.id}.ogg"
    await bot.download_file(file.file_path, path)
    try:
        txt = await transcribe_audio(path)
        st = user_learning_state.get(m.from_user.id)
        if st and st.get("awaiting_question"):
            answer = await answer_student_question(st["topic"], txt.strip())
            st["awaiting_question"] = False
            st["index"] += 1
            await m.answer(answer)
            await send_next_chunk(m.from_user.id, bot)
        else:
            await process_answer(m, txt.strip())
    finally:
        os.remove(path)

@router.message(lambda m: m.text and not m.text.startswith("/"))
async def on_text(m: types.Message, bot):
    st = user_learning_state.get(m.from_user.id)
    if st and st.get("awaiting_question"):
        await on_student_question(m, bot)
    else:
        await process_answer(m, m.text.strip())

async def process_answer(m: types.Message, transcript: str):
    uid = m.from_user.id
    topic = user_topics.pop(uid, None) or await classify_topic(transcript)
    ctx = "\n\n".join(TEXTBOOK_CONTENT.get(topic, [])[:3])
    feedback = await analyze_answer(transcript, topic, ctx)
    clean = clean_html(feedback)
    save_answer(uid, m.from_user.full_name, topic, transcript, clean)
    from bot.handlers.menu import main_kb
    await m.answer(
        f"üìò –¢–µ–º–∞: <b>{topic}</b>\n"
        f"üìù –û—Ç–≤–µ—Ç: {transcript}\n\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{clean}",
        reply_markup=main_kb
    )

@router.message(lambda m: m.text and m.from_user.id in user_learning_state and user_learning_state[m.from_user.id].get("awaiting_question"))
async def on_student_question(m: types.Message, bot):
    st = user_learning_state[m.from_user.id]
    topic = st["topic"]
    answer = await answer_student_question(topic, m.text.strip())
    st["awaiting_question"] = False
    st["index"] += 1
    await m.answer(answer)
    await send_next_chunk(m.from_user.id, bot)

@router.message(lambda m: m.text == "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def resume_course(m: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = user_learning_state.get(m.from_user.id)
    if not state:
        await m.answer("–¢—ã –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –∫—É—Ä—Å. –í—ã–±–µ—Ä–∏ '–ö—É—Ä—Å –ø–æ –æ—Ä–≥–∞–Ω–∏–∫–µ' –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.", reply_markup=main_kb)
        return
    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å—Ç—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π chunk
    from bot.handlers.topics import send_next_chunk  # –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Ä—Ü–∏–∏
    await send_next_chunk(m.from_user.id, m.bot)