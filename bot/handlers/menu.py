from aiogram import Router, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
)
from bot.utils import LEARNING_TOPICS, user_learning_state
from bot.services.spreadsheet import fetch_user_records
from bot.services.pdf_generator import make_report

# –µ—Å–ª–∏ main_kb –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö ‚Äî –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π —Ç–∞–º: from bot.handlers.menu import main_kb

router = Router()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [
            types.KeyboardButton(text="üå± –ö—É—Ä—Å –ø–æ –æ—Ä–≥–∞–Ω–∏–∫–µ"),
            types.KeyboardButton(text="üìù –¢–µ—Å—Ç—ã")
        ],
        [
            types.KeyboardButton(text="üß™ –£—Å—Ç–Ω—ã–π –∑–∞—á–µ—Ç"),
            types.KeyboardButton(text="üìà –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç"),
        ],
        [
 #           types.KeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"),
            types.KeyboardButton(text="‚ÑπÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç")
            
        ]
    ],
    resize_keyboard=True
)   # <-- –°–∫–æ–±–∫–∞!


@router.message(lambda m: m.text == "/start" or m.text == "–ú–µ–Ω—é")
async def cmd_start(m: types.Message):
    await m.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Ö–∏–º–∏–∏.\n\n"
        "‚Ä¢ üå± –ö—É—Ä—Å –ø–æ –æ—Ä–≥–∞–Ω–∏–∫–µ ‚Äî –∏–∑—É—á–∏ –≤–µ—Å—å –∫—É—Ä—Å –ø–æ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Ö–∏–º–∏–∏ –ø–æ –≥–ª–∞–≤–∞–º.\n"
        "‚Ä¢ ‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å.\n"
        "‚Ä¢ üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç ‚Äî PDF —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.\n"
        "‚Ä¢ üß™ –£—Å—Ç–Ω—ã–π –∑–∞—á–µ—Ç ‚Äî —É—Å–Ω—ã–π –∑–∞—á–µ—Ç –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ò–ò.\n"
        "‚Ä¢ üìù –¢–µ—Å—Ç—ã ‚Äî –ø—Ä–æ–π—Ç–∏ –≥–æ—Ç–æ–≤—ã–µ —Ç–µ—Å—Ç—ã.",
        reply_markup=main_kb
)

@router.message(lambda m: m.text == "üå± –ö—É—Ä—Å –ø–æ –æ—Ä–≥–∞–Ω–∏–∫–µ")
async def on_learning_start(m: types.Message):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤ –∫—É—Ä—Å–∞ –∫–∞–∫ inline-–∫–Ω–æ–ø–∫–∏
    buttons = [
        [InlineKeyboardButton(text=topic, callback_data=f"learn_topic_{i}")]
        for i, topic in enumerate(LEARNING_TOPICS)
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await m.answer(
        "üå± –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫—É—Ä—Å –ø–æ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Ö–∏–º–∏–∏!\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≥–ª–∞–≤—ã, –∏–∑—É—á–∞—Ç—å —Ç–µ–æ—Ä–∏—é –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è.\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚Äî –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.",
        reply_markup=kb
    )

@router.message(lambda m: m.text == "üìà –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç")
async def get_report(m: types.Message):
    records = fetch_user_records(m.from_user.id)
    if not records:
        return await m.answer("–¢—ã –µ—â—ë –Ω–µ —Å–¥–∞–ª –Ω–∏ –æ–¥–Ω–æ–π —Ç–µ–º—ã.")
    pdf_path = make_report(m.from_user.id, m.from_user.full_name, records)
    await m.answer_document(FSInputFile(pdf_path), caption="–í–æ—Ç —Ç–≤–æ–π PDF-–æ—Ç—á—ë—Ç!")

@router.message(lambda m: m.text == "‚ÑπÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç")
async def how_bot_works(m: types.Message):
    await m.answer(
        "‚ÑπÔ∏è –Ø ‚Äî —É—á–µ–±–Ω—ã–π –±–æ—Ç –ø–æ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Ö–∏–º–∏–∏:\n"
        "1. –í—ã–±–∏—Ä–∞–π —Ç–µ–º—ã –∏–ª–∏ –ø—Ä–æ—Ö–æ–¥–∏ –∫—É—Ä—Å –ø–æ –≥–ª–∞–≤–∞–º\n"
        "2. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (—Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º)\n"
        "3. –ü–æ–ª—É—á–∞–π –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "4. –í—ã–ø–æ–ª–Ω—è–π —Ç–µ—Å—Ç—ã, —Å–ª–µ–¥–∏ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º!\n"
        "–ú–æ–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ –º–µ–Ω—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é."
    )

@router.message(lambda m: m.text == "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def resume_course(m: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = user_learning_state.get(m.from_user.id)
    if not state:
        await m.answer("–¢—ã –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª –∫—É—Ä—Å. –í—ã–±–µ—Ä–∏ '–ö—É—Ä—Å –ø–æ –æ—Ä–≥–∞–Ω–∏–∫–µ' –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.", reply_markup=main_kb)
        return
    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å—Ç—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π chunk
    from bot.handlers.topics import send_next_chunk  # –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Ä—Ü–∏–∏
    await send_next_chunk(m.from_user.id, m.bot)

# –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π