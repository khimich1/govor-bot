import os
from aiogram import Router, Bot, types
from aiogram.enums import ParseMode
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
    FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from aiogram.filters import Command, CommandStart

from .utils import (
    ALL_TOPICS, clean_html, user_topics, LEARNING_TOPICS,
    user_learning_state, TEXTBOOK_CONTENT, latex_to_codeblock
)
from .gpt_service import (
    classify_topic, analyze_answer, transcribe_audio,
    teach_material, answer_student_question
)
from .spreadsheet import save_answer, fetch_user_records
from .pdf_generator import make_report
from .test_sql import (
    get_all_tests_types, get_questions_by_type, get_question_by_id
)

router = Router()
user_test_state = {}

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÑ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç")],
        [KeyboardButton(text="‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?"), KeyboardButton(text="üß™ –¢–µ–º—ã")],
        [KeyboardButton(text="üå± –ö—É—Ä—Å –ø–æ –æ—Ä–≥–∞–Ω–∏–∫–µ"), KeyboardButton(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")],
        [KeyboardButton(text="üìù –¢–µ—Å—Ç—ã")]
    ],
    resize_keyboard=True
)

topics_kb = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text=ALL_TOPICS[i]),
            KeyboardButton(text=ALL_TOPICS[i+1] if i+1 < len(ALL_TOPICS) else "")
        ]
        for i in range(0, len(ALL_TOPICS), 2)
    ] + [[KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

after_topic_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚¨ÖÔ∏è –ö —Ç–µ–º–∞–º"), KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

choose_chapter_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é")]
    ],
    resize_keyboard=True,
)

def get_tests_types_kb():
    types = get_all_tests_types()
    keyboard = [
        [InlineKeyboardButton(text=f"–¢–µ—Å—Ç {t}", callback_data=f"choose_test_{t}")]
        for t in types if t not in (None, '')
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.message(CommandStart())
async def cmd_start(m: types.Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ö–∏–º–∏–∫ üéì\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç/–≥–æ–ª–æ—Å ‚Äî —è —Ä–∞—Å—à–∏—Ñ—Ä—É—é –∏ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É—é.\n"
        "‚Ä¢ üß™ –¢–µ–º—ã ‚Äî —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n"
        "‚Ä¢ üå± –ö—É—Ä—Å –ø–æ –æ—Ä–≥–∞–Ω–∏–∫–µ ‚Äî –ø–æ –≥–ª–∞–≤–∞–º –∏–∑ —É—á–µ–±–Ω–∏–∫–∞.\n"
        "‚Ä¢ ‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å.\n"
        "‚Ä¢ üìÑ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç ‚Äî PDF —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.\n"
        "‚Ä¢ üìù –¢–µ—Å—Ç—ã ‚Äî –ø—Ä–æ–π—Ç–∏ –≥–æ—Ç–æ–≤—ã–µ —Ç–µ—Å—Ç—ã.",
        reply_markup=main_kb
    )

@router.message(lambda m: m.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é")
async def back_to_menu(m: types.Message):
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)

@router.message(Command("menu"))
async def show_menu_cmd(m: types.Message):
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)

@router.message(lambda m: m.text == "üß™ –¢–µ–º—ã")
async def show_topics(m: types.Message):
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø–æ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Ö–∏–º–∏–∏:", reply_markup=topics_kb)

@router.message(lambda m: m.text in ALL_TOPICS)
async def ask_questions(m: types.Message):
    user_topics[m.from_user.id] = m.text
    questions = (
        f"1. –û–±—â–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –∫–ª–∞—Å—Å–∞ {m.text}\n"
        f"2. –°–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è {m.text}\n"
        f"3. –•–∏–º–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ {m.text}"
    )
    await m.answer(questions, reply_markup=after_topic_kb)
    await m.answer("–ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã:")

@router.message(lambda m: m.text == "‚¨ÖÔ∏è –ö —Ç–µ–º–∞–º")
async def back_to_topics(m: types.Message):
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –ø–æ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Ö–∏–º–∏–∏:", reply_markup=topics_kb)

# ========== –¢–µ—Å—Ç—ã ==========

@router.message(lambda m: m.text == "üìù –¢–µ—Å—Ç—ã")
async def show_tests_types_menu(m: types.Message):
    await m.answer("–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–∞:", reply_markup=get_tests_types_kb())

@router.message(Command("tests"))
async def show_tests_menu_cmd(m: types.Message):
    await show_tests_types_menu(m)

@router.callback_query(lambda c: c.data.startswith("choose_test_"))
async def start_test(cb: CallbackQuery):
    try:
        test_type = int(cb.data.split("_")[-1])
    except ValueError:
        await cb.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–∞.")
        return
    questions = get_questions_by_type(test_type)
    if not questions:
        await cb.message.answer("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞.", reply_markup=main_kb)
        await cb.answer()
        return
    user_test_state[cb.from_user.id] = {
        "type": test_type,
        "idx": 0,
        "q_ids": [q["id"] for q in questions]
    }
    await send_next_test_question(cb.from_user.id, cb.message, is_callback=True)
    await cb.answer()

async def send_next_test_question(user_id, message_obj, is_callback=False):
    state = user_test_state.get(user_id)
    if not state:
        return
    idx = state["idx"]
    q_ids = state["q_ids"]
    if idx >= len(q_ids):
        user_test_state.pop(user_id, None)
        await message_obj.answer("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é.", reply_markup=main_kb)
        return
    q = get_question_by_id(q_ids[idx])
    options = q['options'].split('\n')
    msg = (
        f"–í–æ–ø—Ä–æ—Å {idx+1} –∏–∑ {len(q_ids)} (–¢–µ—Å—Ç {state['type']})\n\n"
        f"{q['question']}\n\n" +
        "\n".join([f"{i+1}. {opt}" for i, opt in enumerate(options)]) +
        "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä(–∞) –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2 –∏–ª–∏ 13):"
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data=f"hint_{q['id']}")]
        ]
    )
    await message_obj.answer(msg, reply_markup=kb)

@router.callback_query(lambda c: c.data.startswith("hint_"))
async def show_hint(cb: CallbackQuery):
    q_id = int(cb.data.split("_")[-1])
    q = get_question_by_id(q_id)
    hint = q.get('hint', '')
    if hint and hint.strip():
        await cb.message.answer(f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:\n{hint}")
    else:
        await cb.message.answer("–î–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏.")
    await cb.answer()

@router.message(lambda m: m.from_user.id in user_test_state)
async def check_test_answer(m: types.Message):
    state = user_test_state.get(m.from_user.id)
    idx = state["idx"]
    q_ids = state["q_ids"]
    q = get_question_by_id(q_ids[idx])
    user_answer = ''.join(filter(str.isdigit, m.text))
    correct = ''.join(filter(str.isdigit, str(q.get("correct_answer", ""))))
    if user_answer == correct:
        resp = "‚úÖ –í–µ—Ä–Ω–æ!"
    else:
        resp = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}"
    # –í–æ—Ç –∑–¥–µ—Å—å! –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏–±–æ explanation, –ª–∏–±–æ detailed_explanation, –µ—Å–ª–∏ –µ—Å—Ç—å.
    explanation = q.get("explanation", "") or q.get("detailed_explanation", "")
    if explanation and explanation.strip():
        resp += f"\n\n{explanation}"

    await m.answer(resp)
    user_test_state[m.from_user.id]["idx"] += 1
    await send_next_test_question(m.from_user.id, m)

# ========== –û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é ==========

@router.message(Command("resume"))
async def resume_cmd(m: types.Message, bot: Bot):
    await cmd_resume(m, bot)

@router.message(Command("report"))
async def report_cmd(m: types.Message):
    await btn_report(m)

@router.message(Command("help"))
async def help_cmd(m: types.Message):
    await how_it_works(m)

@router.message(lambda m: m.text == "‚ùì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?")
async def how_it_works(m: types.Message):
    await m.answer(
        "–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å, –æ–ø—Ä–µ–¥–µ–ª—è—é —Ç–µ–º—É, –¥–∞—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ GPT, "
        "—Å–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Google Sheets –∏ —Ñ–æ—Ä–º–∏—Ä—É—é PDF-–æ—Ç—á—ë—Ç.",
        reply_markup=main_kb
    )

@router.message(lambda m: m.text == "üìÑ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç")
async def btn_report(m: types.Message):
    records = fetch_user_records(m.from_user.id)
    if not records:
        return await m.answer("–¢—ã –µ—â—ë –Ω–µ —Å–¥–∞–ª –Ω–∏ –æ–¥–Ω–æ–π —Ç–µ–º—ã.", reply_markup=main_kb)
    pdf_path = make_report(m.from_user.id, m.from_user.full_name, records)
    await m.answer_document(FSInputFile(pdf_path), reply_markup=main_kb)

@router.message(lambda m: m.text == "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def cmd_resume(m: types.Message, bot: Bot):
    st = user_learning_state.get(m.from_user.id)
    if not st:
        return await m.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—É—Ä—Å–∞. –ù–∞–∂–º–∏ üå± –ö—É—Ä—Å –ø–æ –æ—Ä–≥–∞–Ω–∏–∫–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=main_kb)
    if st.get("awaiting_question"):
        return await m.answer("–í—ã –≤ —Ä–µ–∂–∏–º–µ –≤–æ–ø—Ä–æ—Å–∞. –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.", reply_markup=ReplyKeyboardRemove())
    await m.answer(f"–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å: {st['topic']}", reply_markup=ReplyKeyboardRemove())
    await send_next_chunk(m.from_user.id, bot)

# ========== –ö—É—Ä—Å –ø–æ –æ—Ä–≥–∞–Ω–∏–∫–µ ==========

@router.message(lambda m: m.text == "üå± –ö—É—Ä—Å –ø–æ –æ—Ä–≥–∞–Ω–∏–∫–µ")
async def on_learning_start(m: types.Message):
    buttons = [
        [InlineKeyboardButton(text=topic, callback_data=f"learn_topic_{i}")]
        for i, topic in enumerate(LEARNING_TOPICS)
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await m.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É –¥–ª—è –∫—É—Ä—Å–∞ –ø–æ –æ—Ä–≥–∞–Ω–∏–∫–µ:",
        reply_markup=kb
    )
    await m.answer(
        "–ú–æ–∂–µ—à—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:",
        reply_markup=choose_chapter_kb
    )

@router.callback_query(lambda c: c.data.startswith("learn_topic_"))
async def on_topic_chosen(cb: CallbackQuery, bot: Bot):
    idx = int(cb.data.split("learn_topic_")[-1])
    topic = LEARNING_TOPICS[idx]
    user_learning_state[cb.from_user.id] = {"topic": topic, "index": 0, "awaiting_question": False}
    await send_next_chunk(cb.from_user.id, bot)

async def send_next_chunk(user_id: int, bot: Bot):
    st = user_learning_state.get(user_id)
    if not st:
        return
    topic = st["topic"]
    idx = st["index"]
    chunks = TEXTBOOK_CONTENT.get(topic, [])
    total = len(chunks)
    chap_num = LEARNING_TOPICS.index(topic) + 1
    chap_total = len(LEARNING_TOPICS)

    if idx >= total:
        await bot.send_message(
            user_id,
            f"–ì–ª–∞–≤–∞ {topic} –ø—Ä–æ–π–¥–µ–Ω–∞! üéâ\n–í–æ–∑–≤—Ä–∞—â–∞—é –º–µ–Ω—é.",
            reply_markup=main_kb
        )
        user_learning_state.pop(user_id, None)
        return

    header = f"–ì–ª–∞–≤–∞ {chap_num}/{chap_total}, –ø–æ—Ä—Ü–∏—è {idx+1}/{total}\n\n"
    raw = await teach_material(chunks[idx])
    formatted = latex_to_codeblock(raw)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="learn_back"),
            InlineKeyboardButton(text="üëç –ü–æ–Ω—è—Ç–Ω–æ", callback_data="learn_ok")
        ],
        [
            InlineKeyboardButton(text="‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="learn_ask"),
            InlineKeyboardButton(text="‚ñ† –°—Ç–æ–ø", callback_data="learn_stop"),
            InlineKeyboardButton(text="üè† –ö –≥–ª–∞–≤–∞–º", callback_data="learn_to_chapters")
        ]
    ])

    await bot.send_message(
        user_id,
        header + formatted,
        reply_markup=kb,
        parse_mode=ParseMode.MARKDOWN
    )

@router.callback_query(lambda c: c.data == "learn_ok")
async def on_learning_ok(cb: CallbackQuery, bot: Bot):
    st = user_learning_state.get(cb.from_user.id)
    if not st:
        return
    st["index"] += 1
    await send_next_chunk(cb.from_user.id, bot)

@router.callback_query(lambda c: c.data == "learn_back")
async def on_learning_back(cb: CallbackQuery, bot: Bot):
    st = user_learning_state.get(cb.from_user.id)
    if not st:
        return
    if st["index"] == 0:
        await cb.answer("–í—ã –Ω–∞ –ø–µ—Ä–≤–æ–π –ø–æ—Ä—Ü–∏–∏.", show_alert=True)
    else:
        st["index"] -= 1
        await send_next_chunk(cb.from_user.id, bot)

@router.callback_query(lambda c: c.data == "learn_ask")
async def on_learning_ask(cb: CallbackQuery, bot: Bot):
    st = user_learning_state.get(cb.from_user.id)
    if not st:
        return
    st["awaiting_question"] = True
    await bot.send_message(cb.from_user.id, "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É:", reply_markup=ReplyKeyboardRemove())

@router.callback_query(lambda c: c.data == "learn_stop")
async def on_learning_stop(cb: CallbackQuery, bot: Bot):
    user_learning_state.pop(cb.from_user.id, None)
    await bot.send_message(
        cb.from_user.id,
        "–ö—É—Ä—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å, –Ω–∞–∂–º–∏ ‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ üå± –ö—É—Ä—Å –ø–æ –æ—Ä–≥–∞–Ω–∏–∫–µ.",
        reply_markup=main_kb
    )

@router.callback_query(lambda c: c.data == "learn_to_chapters")
async def to_chapters(cb: CallbackQuery, bot: Bot):
    user_learning_state.pop(cb.from_user.id, None)
    buttons = [
        [InlineKeyboardButton(text=topic, callback_data=f"learn_topic_{i}")]
        for i, topic in enumerate(LEARNING_TOPICS)
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await bot.send_message(cb.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≤—É –¥–ª—è –∫—É—Ä—Å–∞ –ø–æ –æ—Ä–≥–∞–Ω–∏–∫–µ:", reply_markup=kb)
    await bot.send_message(cb.from_user.id, "–ú–æ–∂–µ—à—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:", reply_markup=choose_chapter_kb)

# ========== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ ==========

@router.message(lambda m: m.text and not m.text.startswith("/"))
async def on_text(m: types.Message, bot: Bot):
    st = user_learning_state.get(m.from_user.id)
    if st and st.get("awaiting_question"):
        await on_student_question(m, bot)
    else:
        await process_answer(m, m.text.strip())

@router.message(lambda m: m.voice is not None)
async def on_voice(m: types.Message, bot: Bot):
    file = await bot.get_file(m.voice.file_id)
    path = f"audio_{m.from_user.id}.ogg"
    await bot.download_file(file.file_path, path)
    try:
        txt = await transcribe_audio(path)
        st = user_learning_state.get(m.from_user.id)
        if st and st.get("awaiting_question"):
            answer = await answer_student_question(st["topic"], txt.strip())
            st["awaiting_question"] = False
            st["index"] += 1
            await m.answer(answer, reply_markup=main_kb)
            await send_next_chunk(m.from_user.id, bot)
        else:
            await process_answer(m, txt.strip())
    finally:
        os.remove(path)

async def process_answer(m: types.Message, transcript: str):
    uid = m.from_user.id
    topic = user_topics.pop(uid, None) or await classify_topic(transcript)
    ctx = "\n\n".join(TEXTBOOK_CONTENT.get(topic, [])[:3])
    feedback = await analyze_answer(transcript, topic, ctx)
    clean = clean_html(feedback)
    save_answer(uid, m.from_user.full_name, topic, transcript, clean)

    await m.answer(
        f"üìò –¢–µ–º–∞: <b>{topic}</b>\n"
        f"üìù –û—Ç–≤–µ—Ç: {transcript}\n\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{clean}",
        reply_markup=main_kb
    )

@router.message(lambda m: m.text and m.from_user.id in user_learning_state and user_learning_state[m.from_user.id].get("awaiting_question"))
async def on_student_question(m: types.Message, bot: Bot):
    st = user_learning_state[m.from_user.id]
    topic = st["topic"]
    answer = await answer_student_question(topic, m.text.strip())
    st["awaiting_question"] = False
    st["index"] += 1
    await m.answer(answer, reply_markup=main_kb)
    await send_next_chunk(m.from_user.id, bot)
