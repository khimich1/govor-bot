import os
import logging
import asyncio
from typing import List

import openai
import httpx
from pydub import AudioSegment
from dotenv import load_dotenv  # –î–ª—è .env

# 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
# 2. –ü–µ—Ä–µ–¥–∞—ë–º –∫–ª—é—á OpenAI –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
openai.api_key = os.getenv("OPENAI_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ffmpeg –¥–ª—è pydub (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
FFMPEG_BIN = os.getenv("FFMPEG_BINARY", "")
if FFMPEG_BIN:
    AudioSegment.converter = FFMPEG_BIN

# –õ–æ–≥–≥–µ—Ä –∏ –∫–ª—é—á API
logger = logging.getLogger(__name__)
openai.api_key = os.getenv("OPENAI_API_KEY")


async def classify_topic(transcript: str) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–º—É –æ—Ç–≤–µ—Ç–∞ —É—á–µ–Ω–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–∞.
    """
    prompt = (
        "–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–µ–º—É –ø–æ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Ö–∏–º–∏–∏ –∏–∑ —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:\n\n"
        f"{transcript}"
    )
    resp = await openai.ChatCompletion.acreate(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
    )
    topic = resp.choices[0].message.content.strip().capitalize()
    logger.info(f"üìö –¢–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: {topic}")
    return topic


async def analyze_answer(
    transcript: str,
    topic: str,
    textbook_context: str
) -> str:
    """
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞, —Å–≤–µ—Ä–∏–≤ –µ–≥–æ —Å —Ç–µ–∫—Å—Ç–æ–º —É—á–µ–±–Ω–∏–∫–∞:
    —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, –æ—à–∏–±–∫–∏, –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è.
    """
    prompt = (
        f"–£ —Ç–µ–±—è –µ—Å—Ç—å —Ç–µ–∫—Å—Ç —É—á–µ–±–Ω–∏–∫–∞ –ø–æ —Ç–µ–º–µ ¬´{topic}¬ª:\n\n"
        f"{textbook_context}\n\n"
        f"–£—á–µ–Ω–∏–∫ –¥–∞–ª —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç:\n\"{transcript}\"\n\n"
        "–°–≤–µ—Ä—å —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç —Å —É—á–µ–±–Ω–∏–∫–æ–º: –æ—Ç–º–µ—Ç—å, –≥–¥–µ –æ–Ω —Ç–æ—á–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏–ª —Ç–µ–∫—Å—Ç, "
        "–≥–¥–µ –¥–æ–ø—É—Å—Ç–∏–ª –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–ª–∏ —É–ø—É—Å—Ç–∏–ª –≤–∞–∂–Ω–æ–µ. –û—Ç–≤–µ—Ç—å —Ç—ë–ø–ª—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –æ—Ç —É—á–∏—Ç–µ–ª—è."
    )
    resp = await openai.ChatCompletion.acreate(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
    )
    feedback = resp.choices[0].message.content.strip()
    logger.info("üí¨ –û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫—É —Å —É—á—ë—Ç–æ–º —É—á–µ–±–Ω–∏–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
    return feedback


async def _transcribe_chunk(file_bytes: bytes) -> str:
    """
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∫—É—Å–æ–∫ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Whisper API.
    """
    url = "https://api.openai.com/v1/audio/transcriptions"
    # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã connect/read/write/pool
    timeout = httpx.Timeout(connect=30.0, read=60.0, write=60.0, pool=60.0)
    files = {
        "file": ("chunk.ogg", file_bytes, "audio/ogg"),
        "model": (None, "whisper-1"),
        "response_format": (None, "text"),
    }

    async with httpx.AsyncClient(timeout=timeout) as client:
        resp = await client.post(
            url,
            headers={"Authorization": f"Bearer {os.getenv('OPENAI_API_KEY')}"},
            files=files
        )
        resp.raise_for_status()
        return resp.text.strip()


async def transcribe_audio(file_path: str) -> str:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ –Ω–∞ 60-—Å–µ–∫—É–Ω–¥–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    logger.info(f"üîç –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (—Å —Ä–µ–∑–∫–æ–π –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã): {file_path}")

    audio = AudioSegment.from_file(file_path, format="ogg")
    duration_ms = len(audio)
    chunk_length_ms = 60 * 1000  # 60 —Å–µ–∫—É–Ω–¥

    transcripts: List[str] = []
    for start in range(0, duration_ms, chunk_length_ms):
        end = min(start + chunk_length_ms, duration_ms)
        chunk = audio[start:end]
        buf = chunk.export(format="ogg")
        data = buf.read()
        buf.close()

        logger.info(f"  ‚Üí –ß–∞–Ω–∫ {start//1000}-{end//1000}s, –±–∞–π—Ç {len(data)}")
        try:
            txt = await _transcribe_chunk(data)
            transcripts.append(txt)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —á–∞–Ω–∫–∞ {start//1000}-{end//1000}: {e}")
            transcripts.append("")
        await asyncio.sleep(0.5)

    full = "\n".join(filter(None, transcripts))
    logger.info("‚úÖ –ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return full


async def teach_material(chunk: str) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç —É—á–µ–±–Ω–∏–∫–∞ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω—É—é, —Å–≤—è–∑–∞–Ω–Ω—É—é –ª–µ–∫—Ü–∏—é –¥–ª—è Telegram, —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    """
    system = (
        "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø–æ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Ö–∏–º–∏–∏."
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–±—ä—è—Å–Ω—è—Ç—å —Ç–µ–æ—Ä–∏—é –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏,,–±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π, –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –∂–∏–∑–Ω–∏, –∫–∞–∫ –µ—Å–ª–∏ –±—ã —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª —É—á–µ–Ω–∏–∫—É –Ω–∞ —É—Ä–æ–∫–µ."
        "–ü—Ä–µ–æ–±—Ä–∞–∑—É–π –¥–∞–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç —É—á–µ–±–Ω–∏–∫–∞ –≤ —Å–≤—è–∑–Ω—É—é, –ª–æ–≥–∏—á–Ω—É—é —á–∞—Å—Ç—å –±–æ–ª—å—à–æ–π –ª–µ–∫—Ü–∏–∏ –ø–æ —Ç–µ–º–µ, –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ –ø–æ —Ö–∏–º–∏–∏, —á—Ç–æ–±—ã –≤—Å–µ —á–∞—Å—Ç–∏ –∫—É—Ä—Å–∞, –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ–¥—Ä—è–¥, –ª–µ–≥–∫–æ —Å–∫–ª–∞–¥—ã–≤–∞–ª–∏—Å—å –≤ –æ–¥–Ω–æ —Ü–µ–ª–æ–µ –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∏—Å—å."
        "–ü–∏—à–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –∏–∑–±–µ–≥–∞–π –¥–ª–∏–Ω–Ω—ã—Ö –∏ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
        "–¢–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –¢–µ–ª–µ–≥—Ä–∞–º."
        ""
        "–û–§–û–†–ú–õ–ï–ù–ò–ï:"
        "‚Äî –î–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã (–º–∞–∫—Å–∏–º—É–º 3‚Äì4 —Å—Ç—Ä–æ–∫–∏)."
        "‚Äî –§–æ—Ä–º—É–ª—ã –∏ —Ö–∏–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –≤—ã–¥–µ–ª—è–π –æ—Ç–¥–µ–ª—å–Ω–æ, –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –º–µ–∂–¥—É –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏."
        "‚Äî –§–æ—Ä–º—É–ª—ã –ø–∏—à–∏ –≤ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–º —Å—Ç–∏–ª–µ: –æ–±—Ä–∞–º–∏ –∏—Ö —Ç—Ä–æ–π–Ω—ã–º–∏ –æ–±—Ä–∞—Ç–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏ (```)."
        "‚Äî –í–∞–∂–Ω—ã–µ –º—ã—Å–ª–∏ –æ—Ç–º–µ—á–∞–π —ç–º–æ–¥–∑–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: üìå, üî•, ‚ö°, üí°."
        "‚Äî –ù–µ –¥–µ–ª–∞–π –ø—Ä–æ—Å—Ç—ã–Ω—é ‚Äî —Ä–∞–∑–±–∏–≤–∞–π –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ –±–ª–æ–∫–∏: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –ø—Ä–∏–º–µ—Ä, –≤—ã–≤–æ–¥, —Ä–µ–∞–∫—Ü–∏—è."
        "‚Äî –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã ‚Äî –æ–±—ä—è—Å–Ω—è–π –∏—Ö –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º."
        "–í –∫–æ–Ω—Ü–µ —Å–ø—Ä–æ—Å–∏: –í—Å—ë –ª–∏ –ø–æ–Ω—è—Ç–Ω–æ? –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–π!"
    )

    resp = await openai.ChatCompletion.acreate(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": system},
            {"role": "user",   "content": chunk},
        ],
        temperature=0.7,
    )
    lecture = resp.choices[0].message.content.strip()
    logger.info("üéì –õ–µ–∫—Ü–∏—è –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
    return lecture


async def answer_student_question(topic: str, question: str) -> str:
    """
    –†–æ–ª—å: –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø–æ —Ç–µ–º–µ. –î–∞—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–π, –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —É—á–µ–Ω–∏–∫–∞.
    """
    system = f"–¢—ã ‚Äî –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø–æ —Ç–µ–º–µ ¬´{topic}¬ª. –û—Ç–≤–µ—á–∞–π –æ—á–µ–Ω—å –ø–æ–Ω—è—Ç–Ω–æ –∏ –∫–æ—Ä–æ—Ç–∫–æ."
    resp = await openai.ChatCompletion.acreate(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": system},
            {"role": "user",   "content": question},
        ],
        temperature=0.7,
    )
    ans = resp.choices[0].message.content.strip()
    logger.info("‚ùì –í–æ–ø—Ä–æ—Å —É—á–µ–Ω–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –æ—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
    return ans
