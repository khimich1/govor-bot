from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

# --- 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã ---
import os
FONT_PATH = os.path.join(os.path.dirname(__file__), "PTSans-Regular.ttf")
pdfmetrics.registerFont(TTFont("PTSans", FONT_PATH))

from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, HRFlowable
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.pagesizes import A4
from reportlab.lib.enums import TA_CENTER
from reportlab.lib import colors

import sqlite3
from .test_sql import get_questions_by_type
from bot.utils import ALL_TOPICS   # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–ª—è –±–ª–æ–∫–∞ "–ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º"

DB_FILE = "test_answers.db"  # –ò–º—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

# --- 2. (–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è) –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–µ–º–µ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è) ---
def get_test_stats_for_user_by_topic(user_id, topic_name):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (total, done, correct, wrong):
    - total   ‚Äî –≤—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ,
    - done    ‚Äî —Å–∫–æ–ª—å–∫–æ —Ä–µ—à–µ–Ω–æ —É—á–µ–Ω–∏–∫–æ–º,
    - correct ‚Äî —Å–∫–æ–ª—å–∫–æ –≤–µ—Ä–Ω–æ,
    - wrong   ‚Äî —Å–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫
    """
    try:
        test_type = ALL_TOPICS.index(topic_name) + 1  # test_type = –Ω–æ–º–µ—Ä —Ç–µ–º—ã
    except ValueError:
        return 0, 0, 0, 0
    with sqlite3.connect(DB_FILE) as conn:
        c = conn.cursor()
        c.execute("SELECT COUNT(*) FROM test_answers WHERE user_id=? AND test_type=?", (user_id, test_type))
        done = c.fetchone()[0]
        c.execute("SELECT COUNT(*) FROM test_answers WHERE user_id=? AND test_type=? AND is_correct=1", (user_id, test_type))
        correct = c.fetchone()[0]
        wrong = done - correct
        total = len(get_questions_by_type(test_type))
        return total, done, correct, wrong

# --- 3. –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á—ë—Ç–∞ –ø–æ —É—á–µ–Ω–∏–∫—É ---
def make_report(user_id, username, records, filename="report.pdf"):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF-–æ—Ç—á—ë—Ç –ø–æ –æ–±—É—á–µ–Ω–∏—é —É—á–µ–Ω–∏–∫–∞:
    user_id ‚Äî Telegram ID,
    username ‚Äî –§–ò–û/–Ω–∏–∫,
    records ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π: [{"–¢–µ–º–∞": ..., "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è": ..., "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π GPT": ...}, ...]
    filename ‚Äî –∏–º—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ PDF-—Ñ–∞–π–ª–∞
    """

    # --- –°—Ç–∏–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è (fontName="PTSans" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!) ---
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle(name="Header", fontName="PTSans", fontSize=18, alignment=TA_CENTER, textColor=colors.HexColor("#3B82F6")))
    styles.add(ParagraphStyle(name="TopicTitle", fontName="PTSans", fontSize=14, spaceAfter=6, textColor=colors.HexColor("#8B5CF6")))
    styles.add(ParagraphStyle(name="NormalText", fontName="PTSans", fontSize=11, leading=14))
    styles.add(ParagraphStyle(name="GPTBlock", fontName="PTSans", fontSize=10, leading=14, textColor=colors.HexColor("#16A34A")))

    doc = SimpleDocTemplate(filename, pagesize=A4)
    story = []

    # --- –ó–∞–≥–æ–ª–æ–≤–æ–∫, –∏–º—è, Telegram ID ---
    story.append(Paragraph("üßë‚Äçüî¨ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Ö–∏–º–∏–∏", styles["Header"]))
    story.append(Spacer(1, 12))
    story.append(Paragraph(f"–§–ò–û/–Ω–∏–∫: <b>{username}</b>", styles["NormalText"]))
    story.append(Paragraph(f"Telegram ID: <b>{user_id}</b>", styles["NormalText"]))
    story.append(Spacer(1, 12))

    # --- –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º (‚úì –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ, ‚Äì –µ—Å–ª–∏ –Ω–µ—Ç) ---
    done = {r["–¢–µ–º–∞"] for r in records}
    story.append(Paragraph("–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º:", styles["TopicTitle"]))
    for topic in ALL_TOPICS:
        mark = "‚úì" if topic in done else "‚Äì"
        story.append(Paragraph(f"{mark} {topic}", styles["NormalText"]))

    # --- –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Ç–µ—Å—Ç–æ–≤ ---
    story.append(Spacer(1, 12))
    story.append(HRFlowable(width="100%", thickness=1, color=colors.HexColor("#8B5CF6")))
    story.append(Paragraph("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞–Ω–∏–π:", styles["TopicTitle"]))

    # --- 4. –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–µ—Å—Ç—É: —Ü–≤–µ—Ç, –º–∞—Ä–∫–µ—Ä, –ª–∏–Ω–∏—è ---
    NUM_TESTS = 28  # –ï—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤ –±–æ–ª—å—à–µ ‚Äî –ø–æ–º–µ–Ω—è–π —á–∏—Å–ª–æ!

    for test_num in range(1, NUM_TESTS + 1):
        total = len(get_questions_by_type(test_num))
        done_tasks, correct, wrong = 0, 0, 0
        with sqlite3.connect(DB_FILE) as conn:
            c = conn.cursor()
            c.execute("SELECT COUNT(*) FROM test_answers WHERE user_id=? AND test_type=?", (user_id, test_num))
            done_tasks = c.fetchone()[0]
            c.execute("SELECT COUNT(*) FROM test_answers WHERE user_id=? AND test_type=? AND is_correct=1", (user_id, test_num))
            correct = c.fetchone()[0]
            wrong = done_tasks - correct

        # --- –ù–æ–≤—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π —Ü–≤–µ—Ç–∞ –∏ –∏–∫–æ–Ω–∫–∏ ---
        if correct >= 15 and done_tasks == total and total != 0:
            icon = "‚úîÔ∏è"
            color = "#22C55E"  # –ó–µ–ª—ë–Ω—ã–π
        elif 8 <= correct < 15:
            icon = "‚ö†Ô∏è"
            color = "#F59E42"  # –ñ—ë–ª—Ç—ã–π
        elif correct < 8 and done_tasks > 0:
            icon = "‚ùå"
            color = "#EF4444"  # –ö—Ä–∞—Å–Ω—ã–π
        else:
            icon = "‚ùå"
            color = "#B0B0B0"  # –°–µ—Ä—ã–π –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏—Å—Ç—É–ø–∞–ª

        stats_text = (
            f"{icon} <b>–¢–µ—Å—Ç {test_num}</b>: <b>{done_tasks}</b> –∏–∑ <b>{total}</b>, "
            f"–≤–µ—Ä–Ω—ã—Ö <b>{correct}</b>, –æ—à–∏–±–æ–∫ <b>{wrong}</b>"
        )

        story.append(Paragraph(stats_text, ParagraphStyle(
            name=f"TestStats_{test_num}",
            fontName="PTSans",
            fontSize=11,
            leading=15,
            textColor=colors.HexColor(color)
        )))
    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ—Å–ª–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:
    story.append(HRFlowable(width="100%", thickness=1, color=colors.HexColor("#8B5CF6")))
    story.append(Spacer(1, 12))

    # --- –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ GPT –ø–æ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ ---
    for r in records:
        story.append(Paragraph(f"–¢–µ–º–∞: {r['–¢–µ–º–∞']}", styles["TopicTitle"]))
        story.append(Paragraph(f"–í—Ä–µ–º—è: {r['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è']}", styles["NormalText"]))
        comment = r["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π GPT"].replace("\n", "<br/>")
        story.append(Paragraph(f"GPT:<br/>{comment}", styles["GPTBlock"]))
        story.append(Spacer(1, 12))

    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF ---
    doc.build(story)
    return filename
